// Code generated by protoc-gen-gogo.
// source: process_payload.proto
// DO NOT EDIT!

package garden

import proto "code.google.com/p/gogoprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ProcessPayload_Source int32

const (
	ProcessPayload_stdin  ProcessPayload_Source = 0
	ProcessPayload_stdout ProcessPayload_Source = 1
	ProcessPayload_stderr ProcessPayload_Source = 2
)

var ProcessPayload_Source_name = map[int32]string{
	0: "stdin",
	1: "stdout",
	2: "stderr",
}
var ProcessPayload_Source_value = map[string]int32{
	"stdin":  0,
	"stdout": 1,
	"stderr": 2,
}

func (x ProcessPayload_Source) Enum() *ProcessPayload_Source {
	p := new(ProcessPayload_Source)
	*p = x
	return p
}
func (x ProcessPayload_Source) String() string {
	return proto.EnumName(ProcessPayload_Source_name, int32(x))
}
func (x *ProcessPayload_Source) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProcessPayload_Source_value, data, "ProcessPayload_Source")
	if err != nil {
		return err
	}
	*x = ProcessPayload_Source(value)
	return nil
}

type ProcessPayload_Signal int32

const (
	ProcessPayload_interrupt ProcessPayload_Signal = 0
	ProcessPayload_kill      ProcessPayload_Signal = 1
)

var ProcessPayload_Signal_name = map[int32]string{
	0: "interrupt",
	1: "kill",
}
var ProcessPayload_Signal_value = map[string]int32{
	"interrupt": 0,
	"kill":      1,
}

func (x ProcessPayload_Signal) Enum() *ProcessPayload_Signal {
	p := new(ProcessPayload_Signal)
	*p = x
	return p
}
func (x ProcessPayload_Signal) String() string {
	return proto.EnumName(ProcessPayload_Signal_name, int32(x))
}
func (x *ProcessPayload_Signal) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProcessPayload_Signal_value, data, "ProcessPayload_Signal")
	if err != nil {
		return err
	}
	*x = ProcessPayload_Signal(value)
	return nil
}

type ProcessPayload struct {
	ProcessId        *uint32                `protobuf:"varint,1,req,name=process_id" json:"process_id,omitempty"`
	Source           *ProcessPayload_Source `protobuf:"varint,2,opt,name=source,enum=garden.ProcessPayload_Source" json:"source,omitempty"`
	Data             *string                `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	ExitStatus       *uint32                `protobuf:"varint,4,opt,name=exit_status" json:"exit_status,omitempty"`
	Error            *string                `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	Tty              *TTY                   `protobuf:"bytes,6,opt,name=tty" json:"tty,omitempty"`
	Signal           *ProcessPayload_Signal `protobuf:"varint,7,opt,name=signal,enum=garden.ProcessPayload_Signal" json:"signal,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ProcessPayload) Reset()         { *m = ProcessPayload{} }
func (m *ProcessPayload) String() string { return proto.CompactTextString(m) }
func (*ProcessPayload) ProtoMessage()    {}

func (m *ProcessPayload) GetProcessId() uint32 {
	if m != nil && m.ProcessId != nil {
		return *m.ProcessId
	}
	return 0
}

func (m *ProcessPayload) GetSource() ProcessPayload_Source {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ProcessPayload_stdin
}

func (m *ProcessPayload) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *ProcessPayload) GetExitStatus() uint32 {
	if m != nil && m.ExitStatus != nil {
		return *m.ExitStatus
	}
	return 0
}

func (m *ProcessPayload) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *ProcessPayload) GetTty() *TTY {
	if m != nil {
		return m.Tty
	}
	return nil
}

func (m *ProcessPayload) GetSignal() ProcessPayload_Signal {
	if m != nil && m.Signal != nil {
		return *m.Signal
	}
	return ProcessPayload_interrupt
}

func init() {
	proto.RegisterEnum("garden.ProcessPayload_Source", ProcessPayload_Source_name, ProcessPayload_Source_value)
	proto.RegisterEnum("garden.ProcessPayload_Signal", ProcessPayload_Signal_name, ProcessPayload_Signal_value)
}
